// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/31/2018 13:21:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          key_chooser
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module key_chooser_vlg_vec_tst();
// constants                                           
// general purpose registers
reg break_from_key;
reg clk;
reg [8:0] din;
reg make_from_key;
reg resetN;
// wires                                               
wire [12:0] break;
wire break_q;
wire [12:0] make;
wire make_q;

// assign statements (if any)                          
key_chooser i1 (
// port map - connection between master ports and signals/registers   
	.\break (break),
	.break_from_key(break_from_key),
	.break_q(break_q),
	.clk(clk),
	.din(din),
	.make(make),
	.make_from_key(make_from_key),
	.make_q(make_q),
	.resetN(resetN)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// make_from_key
initial
begin
	make_from_key = 1'b0;
	make_from_key = #50000 1'b1;
	make_from_key = #130000 1'b0;
end 

// break_from_key
initial
begin
	break_from_key = 1'b0;
	break_from_key = #180000 1'b1;
	break_from_key = #10000 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b0;
end 
// din[ 8 ]
initial
begin
	din[8] = 1'b0;
end 
// din[ 7 ]
initial
begin
	din[7] = 1'b0;
end 
// din[ 6 ]
initial
begin
	din[6] = 1'b0;
end 
// din[ 5 ]
initial
begin
	din[5] = 1'b0;
end 
// din[ 4 ]
initial
begin
	din[4] = 1'b0;
	din[4] = #50000 1'b1;
	din[4] = #140000 1'b0;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b0;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b0;
	din[2] = #50000 1'b1;
	din[2] = #140000 1'b0;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
	din[1] = #50000 1'b1;
	din[1] = #140000 1'b0;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b0;
end 
endmodule

