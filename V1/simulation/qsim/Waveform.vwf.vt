// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/29/2018 16:55:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          addr_counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module addr_counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_IN;
reg en;
reg en1;
reg resetN;
// wires                                               
wire [7:0] addr;

// assign statements (if any)                          
addr_counter i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.CLK_IN(CLK_IN),
	.en(en),
	.en1(en1),
	.resetN(resetN)
);
initial 
begin 
#1000000 $finish;
end 

// CLK_IN
always
begin
	CLK_IN = 1'b0;
	CLK_IN = #750 1'b1;
	#250;
end 

// en
always
begin
	en = 1'b0;
	en = #1500 1'b1;
	#500;
end 

// en1
initial
begin
	en1 = 1'b0;
	en1 = #60000 1'b1;
	en1 = #40000 1'b0;
	en1 = #100000 1'b1;
	en1 = #10000 1'b0;
	en1 = #690000 1'b1;
	en1 = #10000 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #40000 1'b1;
end 
endmodule

