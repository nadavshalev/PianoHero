// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/03/2018 12:30:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          createSongs
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module createSongs_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg enable;
reg metronom_sw;
reg resetN;
reg screen_end;
reg [1:0] song_choose;
reg [31:0] speedNotes;
// wires                                               
wire metronon_enable;
wire note_length_0_7;
wire note_length_0_6;
wire note_length_0_5;
wire note_length_0_4;
wire note_length_0_3;
wire note_length_0_2;
wire note_length_0_1;
wire note_length_0_0;
wire note_length_1_7;
wire note_length_1_6;
wire note_length_1_5;
wire note_length_1_4;
wire note_length_1_3;
wire note_length_1_2;
wire note_length_1_1;
wire note_length_1_0;
wire note_length_2_7;
wire note_length_2_6;
wire note_length_2_5;
wire note_length_2_4;
wire note_length_2_3;
wire note_length_2_2;
wire note_length_2_1;
wire note_length_2_0;
wire note_length_3_7;
wire note_length_3_6;
wire note_length_3_5;
wire note_length_3_4;
wire note_length_3_3;
wire note_length_3_2;
wire note_length_3_1;
wire note_length_3_0;
wire note_length_4_7;
wire note_length_4_6;
wire note_length_4_5;
wire note_length_4_4;
wire note_length_4_3;
wire note_length_4_2;
wire note_length_4_1;
wire note_length_4_0;
wire note_length_5_7;
wire note_length_5_6;
wire note_length_5_5;
wire note_length_5_4;
wire note_length_5_3;
wire note_length_5_2;
wire note_length_5_1;
wire note_length_5_0;
wire note_length_6_7;
wire note_length_6_6;
wire note_length_6_5;
wire note_length_6_4;
wire note_length_6_3;
wire note_length_6_2;
wire note_length_6_1;
wire note_length_6_0;
wire note_length_7_7;
wire note_length_7_6;
wire note_length_7_5;
wire note_length_7_4;
wire note_length_7_3;
wire note_length_7_2;
wire note_length_7_1;
wire note_length_7_0;
wire note_length_8_7;
wire note_length_8_6;
wire note_length_8_5;
wire note_length_8_4;
wire note_length_8_3;
wire note_length_8_2;
wire note_length_8_1;
wire note_length_8_0;
wire note_length_9_7;
wire note_length_9_6;
wire note_length_9_5;
wire note_length_9_4;
wire note_length_9_3;
wire note_length_9_2;
wire note_length_9_1;
wire note_length_9_0;
wire note_length_10_7;
wire note_length_10_6;
wire note_length_10_5;
wire note_length_10_4;
wire note_length_10_3;
wire note_length_10_2;
wire note_length_10_1;
wire note_length_10_0;
wire note_length_11_7;
wire note_length_11_6;
wire note_length_11_5;
wire note_length_11_4;
wire note_length_11_3;
wire note_length_11_2;
wire note_length_11_1;
wire note_length_11_0;
wire note_length_12_7;
wire note_length_12_6;
wire note_length_12_5;
wire note_length_12_4;
wire note_length_12_3;
wire note_length_12_2;
wire note_length_12_1;
wire note_length_12_0;

// assign statements (if any)                          
createSongs i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.enable(enable),
	.metronom_sw(metronom_sw),
	.metronon_enable(metronon_enable),
	.resetN(resetN),
	.screen_end(screen_end),
	.song_choose(song_choose),
	.speedNotes(speedNotes)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// metronom_sw
initial
begin
	metronom_sw = 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #20000 1'b1;
end 

// screen_end
always
begin
	screen_end = 1'b0;
	screen_end = #1500 1'b1;
	#500;
end 
// song_choose[ 1 ]
initial
begin
	song_choose[1] = 1'b0;
end 
// song_choose[ 0 ]
initial
begin
	song_choose[0] = 1'b0;
end 
// speedNotes[ 31 ]
initial
begin
	speedNotes[31] = 1'b0;
end 
// speedNotes[ 30 ]
initial
begin
	speedNotes[30] = 1'b0;
end 
// speedNotes[ 29 ]
initial
begin
	speedNotes[29] = 1'b0;
end 
// speedNotes[ 28 ]
initial
begin
	speedNotes[28] = 1'b0;
end 
// speedNotes[ 27 ]
initial
begin
	speedNotes[27] = 1'b0;
end 
// speedNotes[ 26 ]
initial
begin
	speedNotes[26] = 1'b0;
end 
// speedNotes[ 25 ]
initial
begin
	speedNotes[25] = 1'b0;
end 
// speedNotes[ 24 ]
initial
begin
	speedNotes[24] = 1'b0;
end 
// speedNotes[ 23 ]
initial
begin
	speedNotes[23] = 1'b0;
end 
// speedNotes[ 22 ]
initial
begin
	speedNotes[22] = 1'b0;
end 
// speedNotes[ 21 ]
initial
begin
	speedNotes[21] = 1'b0;
end 
// speedNotes[ 20 ]
initial
begin
	speedNotes[20] = 1'b0;
end 
// speedNotes[ 19 ]
initial
begin
	speedNotes[19] = 1'b0;
end 
// speedNotes[ 18 ]
initial
begin
	speedNotes[18] = 1'b0;
end 
// speedNotes[ 17 ]
initial
begin
	speedNotes[17] = 1'b0;
end 
// speedNotes[ 16 ]
initial
begin
	speedNotes[16] = 1'b0;
end 
// speedNotes[ 15 ]
initial
begin
	speedNotes[15] = 1'b0;
end 
// speedNotes[ 14 ]
initial
begin
	speedNotes[14] = 1'b0;
end 
// speedNotes[ 13 ]
initial
begin
	speedNotes[13] = 1'b0;
end 
// speedNotes[ 12 ]
initial
begin
	speedNotes[12] = 1'b0;
end 
// speedNotes[ 11 ]
initial
begin
	speedNotes[11] = 1'b0;
end 
// speedNotes[ 10 ]
initial
begin
	speedNotes[10] = 1'b0;
end 
// speedNotes[ 9 ]
initial
begin
	speedNotes[9] = 1'b0;
end 
// speedNotes[ 8 ]
initial
begin
	speedNotes[8] = 1'b0;
end 
// speedNotes[ 7 ]
initial
begin
	speedNotes[7] = 1'b0;
end 
// speedNotes[ 6 ]
initial
begin
	speedNotes[6] = 1'b0;
end 
// speedNotes[ 5 ]
initial
begin
	speedNotes[5] = 1'b0;
end 
// speedNotes[ 4 ]
initial
begin
	speedNotes[4] = 1'b0;
end 
// speedNotes[ 3 ]
initial
begin
	speedNotes[3] = 1'b0;
end 
// speedNotes[ 2 ]
initial
begin
	speedNotes[2] = 1'b0;
end 
// speedNotes[ 1 ]
initial
begin
	speedNotes[1] = 1'b0;
end 
// speedNotes[ 0 ]
initial
begin
	speedNotes[0] = 1'b0;
end 
endmodule

