// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/27/2018 10:18:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          score
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module score_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg resetN;
reg [31:0] score_note0;
// wires                                               
wire [31:0] tens;
wire [31:0] unit;

// assign statements (if any)                          
score i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.resetN(resetN),
	.score_note0(score_note0),
	.tens(tens),
	.unit(unit)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #20000 1'b1;
end 
// score_note0[ 31 ]
initial
begin
	score_note0[31] = 1'b0;
	score_note0[31] = #230000 1'b1;
	score_note0[31] = #10000 1'b0;
	score_note0[31] = #280000 1'b1;
	score_note0[31] = #10000 1'b0;
end 
// score_note0[ 30 ]
initial
begin
	score_note0[30] = 1'b0;
	score_note0[30] = #230000 1'b1;
	score_note0[30] = #10000 1'b0;
	score_note0[30] = #280000 1'b1;
	score_note0[30] = #10000 1'b0;
end 
// score_note0[ 29 ]
initial
begin
	score_note0[29] = 1'b0;
	score_note0[29] = #230000 1'b1;
	score_note0[29] = #10000 1'b0;
	score_note0[29] = #280000 1'b1;
	score_note0[29] = #10000 1'b0;
end 
// score_note0[ 28 ]
initial
begin
	score_note0[28] = 1'b0;
	score_note0[28] = #230000 1'b1;
	score_note0[28] = #10000 1'b0;
	score_note0[28] = #280000 1'b1;
	score_note0[28] = #10000 1'b0;
end 
// score_note0[ 27 ]
initial
begin
	score_note0[27] = 1'b0;
	score_note0[27] = #230000 1'b1;
	score_note0[27] = #10000 1'b0;
	score_note0[27] = #280000 1'b1;
	score_note0[27] = #10000 1'b0;
end 
// score_note0[ 26 ]
initial
begin
	score_note0[26] = 1'b0;
	score_note0[26] = #230000 1'b1;
	score_note0[26] = #10000 1'b0;
	score_note0[26] = #280000 1'b1;
	score_note0[26] = #10000 1'b0;
end 
// score_note0[ 25 ]
initial
begin
	score_note0[25] = 1'b0;
	score_note0[25] = #230000 1'b1;
	score_note0[25] = #10000 1'b0;
	score_note0[25] = #280000 1'b1;
	score_note0[25] = #10000 1'b0;
end 
// score_note0[ 24 ]
initial
begin
	score_note0[24] = 1'b0;
	score_note0[24] = #230000 1'b1;
	score_note0[24] = #10000 1'b0;
	score_note0[24] = #280000 1'b1;
	score_note0[24] = #10000 1'b0;
end 
// score_note0[ 23 ]
initial
begin
	score_note0[23] = 1'b0;
	score_note0[23] = #230000 1'b1;
	score_note0[23] = #10000 1'b0;
	score_note0[23] = #280000 1'b1;
	score_note0[23] = #10000 1'b0;
end 
// score_note0[ 22 ]
initial
begin
	score_note0[22] = 1'b0;
	score_note0[22] = #230000 1'b1;
	score_note0[22] = #10000 1'b0;
	score_note0[22] = #280000 1'b1;
	score_note0[22] = #10000 1'b0;
end 
// score_note0[ 21 ]
initial
begin
	score_note0[21] = 1'b0;
	score_note0[21] = #230000 1'b1;
	score_note0[21] = #10000 1'b0;
	score_note0[21] = #280000 1'b1;
	score_note0[21] = #10000 1'b0;
end 
// score_note0[ 20 ]
initial
begin
	score_note0[20] = 1'b0;
	score_note0[20] = #230000 1'b1;
	score_note0[20] = #10000 1'b0;
	score_note0[20] = #280000 1'b1;
	score_note0[20] = #10000 1'b0;
end 
// score_note0[ 19 ]
initial
begin
	score_note0[19] = 1'b0;
	score_note0[19] = #230000 1'b1;
	score_note0[19] = #10000 1'b0;
	score_note0[19] = #280000 1'b1;
	score_note0[19] = #10000 1'b0;
end 
// score_note0[ 18 ]
initial
begin
	score_note0[18] = 1'b0;
	score_note0[18] = #230000 1'b1;
	score_note0[18] = #10000 1'b0;
	score_note0[18] = #280000 1'b1;
	score_note0[18] = #10000 1'b0;
end 
// score_note0[ 17 ]
initial
begin
	score_note0[17] = 1'b0;
	score_note0[17] = #230000 1'b1;
	score_note0[17] = #10000 1'b0;
	score_note0[17] = #280000 1'b1;
	score_note0[17] = #10000 1'b0;
end 
// score_note0[ 16 ]
initial
begin
	score_note0[16] = 1'b0;
	score_note0[16] = #230000 1'b1;
	score_note0[16] = #10000 1'b0;
	score_note0[16] = #280000 1'b1;
	score_note0[16] = #10000 1'b0;
end 
// score_note0[ 15 ]
initial
begin
	score_note0[15] = 1'b0;
	score_note0[15] = #230000 1'b1;
	score_note0[15] = #10000 1'b0;
	score_note0[15] = #280000 1'b1;
	score_note0[15] = #10000 1'b0;
end 
// score_note0[ 14 ]
initial
begin
	score_note0[14] = 1'b0;
	score_note0[14] = #230000 1'b1;
	score_note0[14] = #10000 1'b0;
	score_note0[14] = #280000 1'b1;
	score_note0[14] = #10000 1'b0;
end 
// score_note0[ 13 ]
initial
begin
	score_note0[13] = 1'b0;
	score_note0[13] = #230000 1'b1;
	score_note0[13] = #10000 1'b0;
	score_note0[13] = #280000 1'b1;
	score_note0[13] = #10000 1'b0;
end 
// score_note0[ 12 ]
initial
begin
	score_note0[12] = 1'b0;
	score_note0[12] = #230000 1'b1;
	score_note0[12] = #10000 1'b0;
	score_note0[12] = #280000 1'b1;
	score_note0[12] = #10000 1'b0;
end 
// score_note0[ 11 ]
initial
begin
	score_note0[11] = 1'b0;
	score_note0[11] = #230000 1'b1;
	score_note0[11] = #10000 1'b0;
	score_note0[11] = #280000 1'b1;
	score_note0[11] = #10000 1'b0;
end 
// score_note0[ 10 ]
initial
begin
	score_note0[10] = 1'b0;
	score_note0[10] = #230000 1'b1;
	score_note0[10] = #10000 1'b0;
	score_note0[10] = #280000 1'b1;
	score_note0[10] = #10000 1'b0;
end 
// score_note0[ 9 ]
initial
begin
	score_note0[9] = 1'b0;
	score_note0[9] = #230000 1'b1;
	score_note0[9] = #10000 1'b0;
	score_note0[9] = #280000 1'b1;
	score_note0[9] = #10000 1'b0;
end 
// score_note0[ 8 ]
initial
begin
	score_note0[8] = 1'b0;
	score_note0[8] = #230000 1'b1;
	score_note0[8] = #10000 1'b0;
	score_note0[8] = #280000 1'b1;
	score_note0[8] = #10000 1'b0;
end 
// score_note0[ 7 ]
initial
begin
	score_note0[7] = 1'b0;
	score_note0[7] = #230000 1'b1;
	score_note0[7] = #10000 1'b0;
	score_note0[7] = #280000 1'b1;
	score_note0[7] = #10000 1'b0;
end 
// score_note0[ 6 ]
initial
begin
	score_note0[6] = 1'b0;
	score_note0[6] = #230000 1'b1;
	score_note0[6] = #10000 1'b0;
	score_note0[6] = #280000 1'b1;
	score_note0[6] = #10000 1'b0;
end 
// score_note0[ 5 ]
initial
begin
	score_note0[5] = 1'b0;
	score_note0[5] = #230000 1'b1;
	score_note0[5] = #10000 1'b0;
	score_note0[5] = #280000 1'b1;
	score_note0[5] = #10000 1'b0;
end 
// score_note0[ 4 ]
initial
begin
	score_note0[4] = 1'b0;
	score_note0[4] = #230000 1'b1;
	score_note0[4] = #10000 1'b0;
	score_note0[4] = #280000 1'b1;
	score_note0[4] = #10000 1'b0;
end 
// score_note0[ 3 ]
initial
begin
	score_note0[3] = 1'b0;
	score_note0[3] = #230000 1'b1;
	score_note0[3] = #10000 1'b0;
	score_note0[3] = #280000 1'b1;
	score_note0[3] = #10000 1'b0;
end 
// score_note0[ 2 ]
initial
begin
	score_note0[2] = 1'b0;
end 
// score_note0[ 1 ]
initial
begin
	score_note0[1] = 1'b0;
	score_note0[1] = #230000 1'b1;
	score_note0[1] = #10000 1'b0;
	score_note0[1] = #280000 1'b1;
	score_note0[1] = #10000 1'b0;
end 
// score_note0[ 0 ]
initial
begin
	score_note0[0] = 1'b0;
	score_note0[0] = #70000 1'b1;
	score_note0[0] = #10000 1'b0;
	score_note0[0] = #50000 1'b1;
	score_note0[0] = #10000 1'b0;
	score_note0[0] = #20000 1'b1;
	score_note0[0] = #10000 1'b0;
	score_note0[0] = #60000 1'b1;
	score_note0[0] = #10000 1'b0;
	score_note0[0] = #50000 1'b1;
	score_note0[0] = #30000 1'b0;
	score_note0[0] = #120000 1'b1;
	score_note0[0] = #10000 1'b0;
	score_note0[0] = #60000 1'b1;
	score_note0[0] = #20000 1'b0;
end 
endmodule

